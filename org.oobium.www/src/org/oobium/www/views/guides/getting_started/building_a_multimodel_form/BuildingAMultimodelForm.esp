title Building a Multi-Model Form

p Another feature of your average blog is the ability to tag posts. To implement this feature your application needs
	+w to interact with more than one model on a single form. Oobium offers support for nested forms.

p To demonstrate this, we will add support for giving each post multiple tags, right in the form where you create
	+w the post. First, create a new model to hold the tags:

div.code <- code $ create model tag name:string post:one

p Again, run the migration to create the database table:

div.code <- code $ migrate

p As we did earlier for the Comments, add the hasMany relation to the Post model so that it will be linked
	+w to the Tags (don't forget to add the opposite properties so it is a true one-to-many relation).

p We will modify posts/PostForm.esp to render a partial to make a tag:

div.code <- code
	+> import com.test.blog.models.*
	+> import com.test.blog.views.tags.*
	+> 
	+> PostForm(Post post)
	+> 
	+> messages
	+> form(post)
	+>   div.field
	+>     div <- label(name)
	+>     div <- text(name)
	+>   div.field
	+>     div <- label(title)
	+>     div <- text(title)
	+>   div.field
	+>     div <- label(content)
	+>     div <- text(content)
	+>   view<TagForm>(new Tag().setPost(post))
	+>   div.actions
	+>     submit

p Now create the folder views/tags and make a file in there called, TagForm.esp, which contains the form for the tag:

div.code <- code
	+> import com.test.blog.models.*
	+> 
	+> TagForm(Tag tag)
	+> 
	+> fields(tag)
	+>   hidden(post)
	+>   div.field
	+>     div <- label(name)
	+>     div <- text(name)
	+>   div.actions
	+>     submit

p Note that this time we've used the fields element rather than the form element.  This will render child form elements
	+w in the same manner, but they will be based on the model supplied to the fields element.

p Finally, we will edit the ShowPost view to show our tags:

div.code <- code
	+> import com.test.blog.models.*
	+> import com.test.blog.views.comments.*
	+> 
	+> ShowPost(Post post)
	+> 
	+> p
	+>   b Name:
	+>   +  { post.getName() }
	+> p
	+>   b Title:
	+>   +  { post.getTitle() }
	+> p
	+>   b Content:
	+>   +  { post.getContent() }
	+> p
	+>   b Tags:
	+>   +  { post.getTags() }
	+> 
	+> h2 Comments
	+> view<ShowComment>(Comment: post.comments())
	+> 
	+> h2 Add a comment:
	+> view<CommentForm>(new Comment().setPost(post))
	+> 
	+> a(post, showEdit) Edit
	+> +=  | 
	+> a(Post.class, showAll) Back

p As you can see, I cheated a little and added a getTags() method to the Post model so we could display a comma
	+w separated list of tags in one line.  That's how you'd do it real life too, so there.