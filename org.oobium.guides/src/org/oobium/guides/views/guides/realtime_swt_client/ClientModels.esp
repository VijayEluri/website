title The Client Models

p We now have our models on the server and a client UI that we want to use them in. To get our models to the client,
	+w simply enter the following command in the Oobium console:

div.code <- code $ export client target:com.test.reader

p You'll be prompted whether you want to export the entire project or just its models. For this example,
	+w enter "m" to just export the models:

div.code <- code
	+> export the full [P]roject, or just its [M]odels? [P/M] m
	+= exported org.jboss.netty.jar to <span class="consoleLink">com.test.reader: /oobium</span>\n
	+= exported org.oobium.jar to <span class="consoleLink">com.test.reader: /oobium</span>\n
	+= exported com.test.blog.models.jar to <span class="consoleLink">com.test.reader: /oobium</span>\n
	+> export complete
	+>  *** models to be accessed by the client must be publised first ***

p as usual, interesting things (such as the exported jars) are hyperlinked in case you want to open them up and poke around.

p We can now use the Post model in our client just like we can in our server.

p First, let's modify ExampleReader to create columns on the table to correspond to our Post model. Replace
	+w the "TODO add field columns" comment with the following:

div.code <- code.java
	+> for(String s : Post.FIELDS) {
	+>   c = new TableColumn(table, SWT.NONE);
	+>   c.setText(StringUtils.titleize(s));
	+>   c.pack();
	+> }

p Make sure to import Post and StringUtils, then start the client up again and you should see five new columns
	+w in the table: "Content", "Created At", "Name", "Title", and "Updated At".

div.note StringUtils contains many useful helper functions - consider importing it statically

p Next, modify ExampleReader to fetch a list of Post models from the server and use them to populate the table.
	+w Replace the "TODO add initial items" comment with:

div.code <- code.java
	+> for(Post post : Post.findAll()) {
	+>   addItem(post);
	+> }

p and add the "addItem(Post)" method:
div.code <- code.java
	+> private static void addItem(final Post post) {
	+>   display.syncExec(new Runnable() {
	+>     @Override
	+>     public void run() {
	+>       TableItem item = new TableItem(table, SWT.NONE);
	+>       item.setText(0, String.valueOf(post.getId()));
	+>       for(int i = 0; i < Post.FIELDS.length; i++) {
	+>         item.setText(i+1, post.get(Post.FIELDS[i], ""));
	+>       }
	+>     }
	+>   });
	+> }

p This one we can't run quite yet - if you do, you should see this kind of error:

div.code <- code(style:"color:red")
	+= Exception in thread "main" <span class="consoleLink">java.sql.SQLException</span>: no PersistService present\n
	+=   at org.oobium.persist.NullPersistService.findAll(<span class="consoleLink">NullPersistService.java:69</span>)\n
	+=   at org.oobium.persist.Model.findAll(<span class="consoleLink">Model.java:67</span>)\n
	+=   at com.test.blog.models.PostModel.findAll(<span class="consoleLink">PostModel.java:93</span>)\n
	+=   at com.test.reader.ExampleReader.main(<span class="consoleLink">ExampleReader.java:31</span>)\n

p which make's' sense as we haven't set up the persistence yet. Let's care of that now by replacing the 
	+w "TODO setup persistence" comment with:

div.code <- code.java
	+> new HttpPersistService("localhost:5000", true);

p Run the client now and, if your server project (com.test.blog) is running, then it will start up and you should see
	+w an item in the table for every Post you have created on the server.

div.note
	+= If the server is not running, you'll get this error: "no published route found for class com.test.blog.models.Post: showAll"

p Right now, the client can request model, manipulate them, and persist them back to the server - add this code in the place
	+w of the "TODO add selection listener" to more of this:

div.code <- code.java
	+> b.addSelectionListener(new SelectionAdapter() {
	+>   @Override
	+>   public void widgetSelected(SelectionEvent e) {
	+>     Post post = new Post();
	+>     post.setTitle(txt.getText());
	+>     post.save();
	+>   }
	+> });

p but to actually recieve notification from the server that something has happened to our models there, we need to take
	+w care of that last comment, "TODO add Observer":

div.code <- code.java
	+> Post.addObserver(new Observer<Post>() {
	+>   @Override
	+>   public void afterCreate(Post post) {
	+>     addItem(post);
	+>   }
	+>   @Override
	+>   public void afterUpdate(Post post) {
	+>     updateItem(post);
	+>   }
	+>   @Override
	+>   public void afterDestroy(int id) {
	+>     removeItem(id);
	+>   }
	+> });

p and, of course, add the missing methods: updateItem and removeItem:

div.code <- code.java
	+> private static void updateItem(final Post post) {
	+>   display.syncExec(new Runnable() {
	+>     @Override
	+>     public void run() {
	+>       String id = String.valueOf(post.getId());
	+>       for(TableItem item : table.getItems()) {
	+>         if(id.equals(item.getText(0))) {
	+>           for(int i = 0; i < Post.FIELDS.length; i++) {
	+>             item.setText(i+1, post.get(Post.FIELDS[i], ""));
	+>           }
	+>           return;
	+>         }
	+>       }
	+>     }
	+>   });
	+> }
	+> 
	+> private static void removeItem(final int id) {
	+>   display.syncExec(new Runnable() {
	+>     @Override
	+>     public void run() {
	+>       String s = String.valueOf(id);
	+>       for(TableItem item : table.getItems()) {
	+>         if(s.equals(item.getText(0))) {
	+>           item.dispose();
	+>           return;
	+>         }
	+>       }
	+>     }
	+>   });
	+> }

p Congratulations! You're done - enjoy real-time updates in your client over WebSockets!