Constructors(String title = "Constructors")

title {title}

p Constructors in ESP files are also extremely similar to their Java counterparts and are used to accomplish the same
	+w purpose - allow objects to be passed in when being instantiated. There are, however, two big differences with
	+w the constructors in ESP files: 1. they cannot have any body, or block, code - only
	+w a signature is allowed; and 2. they can specify a default value for the parameter(s) being passed in.

p The restriction of not allowing a code block is to make sure no-one tries to turn this view object into a piece of
	+w business logic - objects passed in should be ready to use with minimal code (ideally, nothing more than a getter
	+w method, if that even).

p The parameters will be accessible within the rest of the ESP file as if they were instance variables within a 
	+w regular Java file (actually, that's exactly what they become in the resulting compiled Java file).

p Default values are a handy feature and are fairly self explanatory. The following constructor is within a file named
	+w ShowPost.esp and allows either passing in a Post object, or nothing at all. Inside this file, there will be a 
	+w variable named "post" that will either contain the value passed in, or the value of "new Post()" if nothing
	+w was passed in:
div.code <- code.java <span class="javaKeyword">ShowPost</span>(Post post = new Post())

p It is used in your Java code as follows:
div.code <- code.java
	+> // pass in the post object
	+> ShowPost showPost = new ShowPost(post);
	+> // use the default value
	+> ShowPost showPost = new ShowPost();

p The only restriction is that once you specify a default value for a parameter, all remaining parameters must also
	+w have a default value specified:
div This is valid:
div.code <- code.java
	span.javaKeyword ShowPost
	+= (Post post, Date start = new Date(), Date end = new Date())
div(style:"margin-top: 10px") This is NOT valid:
div.badCode <- code.java
	span.javaKeyword ShowPost
	+= (Post post, Date start = new Date(), Date end)

p As with import statements, you can have one, many, or no constructors defined in your ESP file.
	br
	+w The overall rules for them are as follows:
ul
	li one per line
	li same format as in Java, except that there is no body / block section
	li must be the first non-empty lines after the imports (or file, if there are no imports)
	li may not be mixed with any non-constructor elements (blank lines are fine)
	li must start at the beginning of the line (cannot be indented)
	li parameters are automatically made available as instance variables (of the same signature)
	li parameters may have default values
