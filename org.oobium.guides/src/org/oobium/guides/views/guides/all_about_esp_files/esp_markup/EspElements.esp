EspElements(String title = "ESP Elements")

p The basis of ESP elements is that, unless otherwise mentioned, they are equivalent to XML elements. The ESP element:

div.code <- code
	+= <span class="espTag">tag</span>#id.class1.class2(attr1: <span class="javaText">"val1"</span>, attr2: <span class="javaText">"val1"</span>) <span class="espIText">inner text</span>

p is equivalent to the following XML:

div.code <- code
	+> <tag id="id" class="class1 class2" attr1="val1" attr2="val2">inner text</tag>

p All parts can be present, some of them, or only the tag, but whatever parts are there must be in the order shown
	+w above. These are valid:

div.code <- code
	+= <span class="espTag">tag</span>\n
	+= <span class="espTag">tag</span>.class1\n
	+= <span class="espTag">tag</span>(attr1: <span class="javaText">"val1"</span>)\n

p but these are not:

div.badCode <- code
	+> #myDiv
	+> tag.class1#myDiv
	+> tag(attr1: "val1").class1

p The "inner text" part (that which comes between the opening and closing XML tags) is denoted in ESP as any characters
	+w following a single space that is not inside the attribute list (the parathesis). Note that I said "single" space -
	+w if more than one space is present, the extra will be translated directly into your XML.

p ESP also adds a special operator for styles common to HTML elements; in particular, hiding HTML elements. The pipe
	+w operator "|" followed by the word "hide" will do just that:

div.code <- code
	+= <span class="espTag">div</span>#myDiv<span class="espOp">|hide</span> <span class="espIText">hello!</span>

p translates to:

div.code <- code
	+> <div id="myDiv" style="display:none">hello!</div>

p Using this format, any XML (and thus HTML) element can be expressed, whether Oobium knows about it or not. This allows
	+w Oobium to help with the elements it does know about (such div, table, object, etc...) without limiting your ability
	+w to use new elements, or even make up your own. 
