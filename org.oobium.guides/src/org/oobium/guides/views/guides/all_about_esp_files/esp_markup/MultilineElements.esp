title Multi-line Elements

p Oobium's ESP format is a bit of a stickler when it comes to elements spanning more than one line. More than one
	+w element per line is alright (if kept as the exception), but having an element span two or more lines is currently
	+w unacceptable, with (of course) a few exceptions: styles, scripts, and an element's inner text. Style and script
	+w sections are covered later; we'll cover the inner text here.

p It can be quite handy put to decent amounts of text directly into an ESP document (like these guides) and that will
	+w most certainly be easier to do with multiple lines rather than one extremely long line. To accomodate this, ESP
	+w allows the continuation of the inner text part of an element on the next line with the use of an extension element:

div.code <- code
	+= <span class="espTag">p</span> <span class="espIText">The quick brown fox</span>\n
	+= <span class="espTab">  </span><span class="espIText">+ jumps over the lazy dog</span>

p This will translate into:

div.code <- code
	+= <p>The quick brown foxjumps over the lazy dog</p>

p almost what we wanted. There is no space between the word "fox" and the word "jumps" because we never asked for one - 
	+w inner text starts <i>after</i> the first space of an element, this includes the + element. To handle this we could
	+w simply add a space at the end of the first line, or at the beginning of the second line, but this would create an
	+w important character that was hidden from the programmer, and thus easily lost in future revisions. A better solution
	+w is to use a derivative of the + element: +w. This is also an inner text extension element but has the added feature
	+w of making sure to add a word separator between the lines if one is not already present. Thus:

div.code <- code
	+= <span class="espTag">p</span> <span class="espIText">The quick brown fox</span>\n
	+= <span class="espTab">  </span><span class="espIText">+w jumps over the lazy dog</span>

p produces what we want:

div.code <- code
	+= <p>The quick brown fox jumps over the lazy dog</p>

p Why then, would we ever use the straight + element? We would use it because it truly is just an extension of the
	+w previous element's inner text, as if it were on the same line. Some times we don't want word separators and,
	+w more importantly, we do want to include the result of a Java expression in our output. There are a couple other
	+w inner text extension elements and only the raw + supports including Java parts (which we'll discuss in the
	+w next section).

p A summary of the inner text extension elements:
ul
	li <b>+</b>
		p The raw extension element - behaves exactly as if its inner text were appended to its parent's inner text.
	li <b>+=</b>
		p The literal extension element - behaves like the raw extension, but does not interpret Java expressions.
	li <b>+w</b>
		p The word extension element - behaves like the literal extension, but makes sure there is a space between words.
			+w This is intended for writing long sections of text.
	li <b>+></b>
		p The prompt extension element - behaves like the literal extension, but makes sure there is a new line between lines
			+w and HTML escapes angle brackets. This is intended for creating sections of code; escaping the angle brackets makes
			+w it easy to write Java generics.