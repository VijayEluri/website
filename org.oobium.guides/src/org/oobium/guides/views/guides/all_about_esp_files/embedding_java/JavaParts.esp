JavaParts(String title = "Java Parts")

title {title}

p Unlike Java elements, Java parts are evaluated to a String and the result is inserted into your ESP code:

div.code <- code.java
	+=  <span class="espTag">div</span>#title { post.getTitle() }

p Everything between curly braces is pure Java code, so if the value of the post model's title field is
	+w "Building Web Services with Oobium", then the generated HTML will be:

div.code <- code
	+> <div id="title">Building Web Services with Oobium</div>

p Right off the bat you may see a familiar security problem here and wonder how we can HTML escape the data that we
	+w inject into our pages. We really don't want to generate something like this:

div.code <- code
	+> <div id="title"><script>doNastyStuff()</script></div>

p Oobium makes this easy to prevent, just the same as other frameworks: there are several methods for escaping
	+w code available in the View class, which is the super class of all compiled ESP files and, therefore, readily at
	+w your disposal:
ul
	li <code>htmlEscape(object)</code> - shortcut: <code>h(object)</code>
		p Escape the characters that would allow injection of new HTML elements
	li <code>jsonEscape(object)</code> - shortcut: <code>j(object)</code>
		p Escape the characters that would cause problems in JSON
	li <code>formEscape(object)</code> - shortcut: <code>f(object)</code>
		p If <code>object</code> is a JsonModel, then return its id, otherwise delegate to HTML escape
	li <code>nullEscape(object)</code> - shortcut: <code>n(object)</code>
		p If <code>object</code> is null, then return an empty String, otherwise delegate to HTML escape

p Thus you could escape any dangerous HTML by writing:

div.code <- code.java
	+=  <span class="espTag">div</span>#title { h(post.getTitle()) }

p You could, but you actually don't have to - Oobium HTML escapes all Java parts by default. But the concept is the
	+w same should you want to use it in other places (a Java element perhaps), or you want to use a different type
	+w of escaping.

p Still, we could go a step further and integrate these common steps a little more. And there's also the question of
	+w what to do when we <i>don't</i> want the HTML escaped.

p Rather than make you write out extra Java syntax, ESP has a special notation for each type of escape - follow the
	+w opening brace with the letter corresponding to the escape function:

div.code <- code.java
	+=  <span class="espTag">div</span>#title {h post.getTitle() } // HTML escaped (default)\n
	+=  <span class="espTag">div</span>#title {j post.getTitle() } // JSON escaped\n
	+=  <span class="espTag">div</span>#title {f post.getTitle() } // Form escaped\n
	+=  <span class="espTag">div</span>#title {n post.getTitle() } // Null escaped\n
	+=  <span class="espTag">div</span>#title {r post.getTitle() } // Raw: not escaped at all\n

p Java parts are certainly a useful way of getting data from your models and displaying it in the inner text part of
	+w HTML elements, but it can also be used for much more. Java parts can exist in almost any part of an ESP
	+w element, and they can be used as many times per line as necessary.

p Let's take the line from section 3.1 above:

div.code <- code
	+= <span class="espTag">tag</span>#id.class1.class2(attr1: <span class="javaText">"val1"</span>, attr2: <span class="javaText">"val2"</span>) <span class="espIText">inner text</span>

p and replace everything we can with Java parts:

div.code <- code
	+= <span class="espTag">tag</span>#{arg1}.{arg2}.{arg3}(attr1: arg4, attr2: arg5) <span class="espIText">inner text</span>

p Basically, everthing except the tag and the attribute keys can be replaced with Java parts.

div.note Note that the attribute values (arg4 and arg5) don't have curly braces around them. This is because
	+w attribute values are ALWAYS Java parts! If you want a simple string there, make sure to use the double quotes!

p We can still take this a little further - each section can be multiple Java parts, or a mix of Java parts and regular text:

div.code <- code
	+= <span class="espTag">tag</span>#row_{rowNumber++}<span class="espIText"> inner text</span><br/>
	+= <span class="espTag">tag</span>#{name}_{rowNumber++}<span class="espIText"> inner text</span>

p Lastly, there is one other place where Java parts can be used: as parameters in custom ESP tags.
	+w You'll see this in the section on views.