title Deleting Associated Objects

p If you delete a post then its associated comments will also need to be deleted. Otherwise they would simply
	+w occupy space in the database. Oobium allows you to use the onDelete property of a relation to achieve this.
	+w Modify the Comment model as follows:

div.code <- code.java
	+> package com.test.blog.models;
	+> 
	+= import static org.oobium.persist.Relation.<span class="javaStaticField">CASCADE</span>;\n
	+> import com.test.blog.models.Post;
	+> import org.oobium.persist.Attribute;
	+> import org.oobium.persist.ModelDescription;
	+> import org.oobium.persist.Relation;
	+> import org.oobium.persist.Text;
	+> 
	+> @ModelDescription(
	+>   attrs = {
	+>     @Attribute(name="commenter", type=String.class),
	+>     @Attribute(name="body", type=Text.class)
	+>   },
	+>   hasOne = {
	+=     @Relation(name="post", type=Post.class, opposite="comments", onDelete=<span class="javaStaticField">CASCADE</span>)\n
	+>   },
	+>   timestamps = true
	+> )
	+> public class Comment extends CommentModel {
	+> 
	+> }

p Now comment models will be destroyed when the Post in their "post" field is destroyed. This is a change at the
	+w persistor level and also changes the foreign key constraint in the schema:

div.code <- code.java
	+= comments.addForeignKey("post", "posts", Map("onDelete", <span class="javaStaticField">CASCADE</span>));