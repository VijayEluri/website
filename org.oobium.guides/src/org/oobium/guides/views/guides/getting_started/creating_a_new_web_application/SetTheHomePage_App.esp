title Setting the Application Home Page

p When creating an application, Oobium goes ahead and creates a sample home page and wires up a route for it.
	+w Now let's take a look at what actually is happening, and how we may change it in the future.

p Open up your application's <code>Activator</code> class (it will be in the root directory of the project);
	+w you can also open it using the console:

div.code
	code $ open activator

p The activator will contain a single method, <code>addRoutes</code>:

div.code <- code.java
	+> package com.test;
	+> 
	+> import com.test.blog.views.pages.Home;
	+> import org.oobium.app.AppService;
	+> import org.oobium.app.routing.AppRouter;
	+> import org.oobium.utils.Config;
	+> 
	+> public class Activator extends AppService {
	+> 
	+>   @Override
	+>   public void addRoutes(Config config, AppRouter router) {
	+> 
	+>     // TODO add routes specific to your application
	+> 
	+>     router.addAssetRoutes();
	+>     router.setHome(Home.class);
	+>   }
	+> 
	+> }

p This method passes in both the application's configuration and router. The router is what we want
	+w to use to add routes to our application and as you can see, we already have two of them set up for us:
ul
	li router.addAssetRoutes() set up routes for everything in the application's assets folder. These are all
		+w intended to be, and are served as if they are, static assets such as images, javascript, style sheets, etc..
	li router.setHome(Home.class) is what is setting up our home route. In this case it is being routed to directly to
		+w the Home.esp view in the application's views folder. This method has a few overloads - take a moment to see
		+w what they are.
