title Listing all Posts

p The easiest place to start looking at functionality is with the code that lists all posts.
	+w Open the <code>PostController</code> class

div.code <- code $ open controller_for post

p Take a look at the showAll action:

div.code <- code.java
	+> @Override // GET/URL/[models]
	+> public void showAll() throws SQLException {
	+>   List<Post> posts = Post.findAll();
	+> 
	+>   switch(wants()) {
	+=     case <span class="javaStaticField">JS</span>:\n
	+=     case <span class="javaStaticField">JSON</span>: render(posts);                   break;\n
	+=     case <span class="javaStaticField">HTML</span>: render(new ShowAllPosts(posts)); break;\n
	+>   }
	+> }

p Post.findAll calls the Post model to return all of the posts currently in the database. The result of
	+w this call is a list containing the posts which has been saved in an instance variable called posts.

div.info For more information on finding records with Oobium, see 
	a("/oobium_query_interface") Oobium Query Interface
	+= .

p The switch statement is an easy way to handle multiple accepts types from the request.  If you were to request
	+w this page and ask for the response in JSON then the case JSON section would be called.  In our case the 
	+w browser has requested HTML and so we choose to render the ShowAllPosts class, which is actually a Java class
	+w that was automatically generated from the ESP file of the same name.  You can open it from the Eclipse
	+w Package Explorer, or by using the open view command in the Oobium console:

div.code <- code $ open view posts/ShowAllPosts

p Here are the contents of posts/ShowAllPosts.esp:

div.code <- code
	+> import java.util.Collection
	+> import org.oobium.persist.Paginator
	+> import com.test.blog.models.*
	+> 
	+> ShowAllPosts(Collection<Post> posts)
	+> ShowAllPosts(Paginator<Post> paginator)
	+> 
	+> h1 Listing posts
	+> 
	+> table
	+>   tr
	+>     th Name
	+>     th Title
	+>     th Content
	+>   - for(Post post : posts) {
	+>       tr
	+>         td { post.getName() }
	+>         td { post.getTitle() }
	+>         td { post.getContent() }
	+>         td <- a(post, show) Show
	+>         td <- a(post, showEdit) Edit
	+>         td <- a(post, destroy, confirm: "Are you sure?") Delete
	+>   - }
	+> 
	+> br
	+> 
	+> a(Post.class, showNew) New Post

p This view iterates over the contents of the posts array to display content and links.
	+w A few things to note in the view:

ul
	li There are two constructors (ShowAllPosts(...)) - these are just like the constructors in a regular Java file
		+w except that they have no body.  The parameters that are identified in the constructors are automatically
		+w available through out the HTML section of the code (everything after the last constructor).  Notice how the
		+w constructor in this ESP file lines up with the creation of a new ShowAllPages object in the controller's
		+w showAll method.
	li Whitespace is important! You probably indent your code already to make it more readable, well, Oobium enforces
		+w this concept and uses it to give you the benefit of not needing closing tags - indentation is how you create
		+w the hierarchy of elements.
	li There are lines of Java source code - any line that starts with a dash ("-") is interpretted as Java source code,
		+w and has access to variables that were defined before it or passed in through the constructor.  In this file
		+w there is a for-each loop that wraps the creation of a row in the table, thus creating a row for each Post in
		+w the Posts collection.
	li There are sections of Java source code - anything enclosed in braces
		+w ("{}") is also interpretted as Java source code; it also has access to variable is constrained to only allow
		+w returning a String (or an Object, which will be converted to a String). As mentioned before - anything after
		+w a space character is considered the HTML element's inner text, so in the code "td { post.getContent() }", a
		+w table data element will be created with the value of post.getContent() inside.
	li There are some wierd left pointing arrows ("<-") - these let us break the rules of indentation (didn't take long,
		+w did it?)  When there's just one child that needs to be added to an element, creating a whole other line can
		+w be unwielding, so Oobium lets you use this short hand: "td <- a" means that the anchor is a child of the td.

div.note
	+w Java sections (parts that are eclosed in braces: { }) are intended to evaluate to a String that will be
	+w displayed on a web page as HTML.  As such, the String is automatically escaped for any non-HTML friendly
	+w characters. Oobium contains convenient syntax to change the type of escaping, and to turn it off and
	+w return raw text:
	ul
		li
			+= {h "my text" } - the "h" denotes HTML escaped (this is the default and wholly equivalent to { "my text" })
		li
			+= {f model } - the "f" denotes a Form field (return the id if the object is a model, HTML escape otherwise)
		li
			+= {j "my text" } - the "j" denotes JSON escaped
		li
			+= {n "my text" } - the "n" denotes Null escaped (print an empty string instead of "null" when the value is null)
		li
			+= {r "my text" } - the "r" denotes raw text, and does not escape anything

div.info For more details on the rendering process, see 
	a("/layouts_and_rendering_in_oobium") Layouts and Rendering in Oobium
	+= .

div.info For more details ESP files, see 
	a("/all_about_esp_files") All about ESP Files
	+= .
