AssociatingModels(String title = "Associating Models")

title {title}

p We created a one way "has one" relationship on the Comment model pointing to the Post model. We also saw how this
	+w creates a foreign key column in the Comment database table.  Now, this also implies that the Post model should
	+w "have many" Comments but to make this a reality we need to update our Post model. To make these relationships
	+w clear, they can be written out in this way:
ul
	li Each comment has one post
	li One post has many comments
p We already have the has one relationship defined in the comment model's ModelDescription, now let's add the
	+w has many relationship to the post model's ModelDescription:

div.code <- code.java
	+> @ModelDescription(
	+>   attrs = {
	+>     @Attribute(name="name", type=String.class),
	+>     @Attribute(name="title", type=String.class),
	+>     @Attribute(name="content", type=Text.class)
	+>   },
	+>   hasMany = {
	+>     @Relation(name="comments", type=Comment.class)
	+>   },
	+>   timestamps = true
	+> )

p This is now almost want we want; there is one little detail we left out of the above list: these two relations are
	+w linked. We could have several hasMany relations pointing to comments ("comments", "myComments",
	+w "favoriteComments", etc.). To link these two relations we need to add an "opposite" property to each:

div The Comment model's hasOne relation:
div.code <- code.java
	+> hasOne = {
	+>   @Relation(name="post", type=Post.class, opposite="comments")
	+> }

div(style:"margin-top: 10px") And the Post model's hasMany relation:
div.code <- code.java
	+> hasMany = {
	+>   @Relation(name="comments", type=Comment.class, opposite="post")
	+> }

p If you take another look at the auto generated migration to create the tables, you should see that it has
	+w not changed. The foreign key required to make a one-to-many relation was already there; the only changes that
	+w occured were in the models themselves. Now you can call comment.getPost().comments().contains(comment) and
	+w it will return true :)

div.info For more information on creating relations in Oobium, see the 
	a("/oobium_model_relationships") Oobium Model Relationships
	+w guide. 

