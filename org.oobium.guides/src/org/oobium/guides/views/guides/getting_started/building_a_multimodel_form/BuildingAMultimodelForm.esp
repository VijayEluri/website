BuildingAMultimodelForm(String title = "Building a Multi-Model Form")

p Another feature of your average blog is the ability to tag posts. To implement this feature your application needs
	+w to interact with more than one model on a single form. Oobium offers support for nested forms.

p To demonstrate this, we will add support for giving each post multiple tags, right in the form where you create
	+w the post. First, create a new model to hold the tags:

div.code <- code $ create model tag name:string post:one

p Again, redo the migration to create the database table:

div.code <- code $ migrate redo

p As we did earlier for the Comments, add the hasMany relation to the Post model so that it will be linked
	+w to the Tags (don't forget to add the opposite property to the @Relation annotation in each model so that it
	+w is a true one-to-many relation).

p We will modify posts/PostForm.esp to render a partial to make a tag:

div.code <- code
	+= <span class="javaKeyword">import</span> com.test.blog.models.*\n
	+= <span class="javaKeyword">import</span> com.test.blog.views.tags.*\n
	+= \n
	+= <span class="javaKeyword">PostForm</span>(Post post)\n
	+= \n
	+= <span class="espTag">form</span>(post)\n
	+= <span class="espTab">  </span><span class="espTag">errors</span>\n
	+= <span class="espTab">  </span><span class="espTag">div</span>.field\n
	+= <span class="espTab">    </span><span class="espTag">label</span>(<span class="javaText">"name"</span>)\n
	+= <span class="espTab">    </span><span class="espTag">text</span>(<span class="javaText">"name"</span>)\n
	+= <span class="espTab">  </span><span class="espTag">div</span>.field\n
	+= <span class="espTab">    </span><span class="espTag">label</span>(<span class="javaText">"title"</span>)\n
	+= <span class="espTab">    </span><span class="espTag">text</span>(<span class="javaText">"title"</span>)\n
	+= <span class="espTab">  </span><span class="espTag">div</span>.field\n
	+= <span class="espTab">    </span><span class="espTag">label</span>(<span class="javaText">"content"</span>)\n
	+= <span class="espTab">    </span><span class="espTag">text</span>(<span class="javaText">"content"</span>)\n
	+= <span class="espTab">  </span><span class="espTag">view</span>
	+ {"<TagForm>"}
	+= (<span class="javaKeyword">new</span> Tag().setPost(post))\n
	+= <span class="espTab">  </span><span class="espTag">div</span>.actions\n
	+= <span class="espTab">    </span><span class="espTag">submit</span>\n

p Now open the tags/TagForm view, and change it to be like this:

div.code <- code
	+= <span class="javaKeyword">import</span> com.test.blog.models.*\n
	+= \n
	+= <span class="javaKeyword">TagForm</span>(Tag tag)\n
	+= \n
	+= <span class="espTag">fields</span>(tag)\n
	+= <span class="espTab">  </span><span class="espTag">hidden</span>(<span class="javaText">"post"</span>)\n
	+= <span class="espTab">  </span><span class="espTag">div</span>.field\n
	+= <span class="espTab">    </span><span class="espTag">label</span>(<span class="javaText">"name"</span>)\n
	+= <span class="espTab">    </span><span class="espTag">text</span>(<span class="javaText">"name"</span>)\n
	+= <span class="espTab">  </span><span class="espTag">div</span>.actions\n
	+= <span class="espTab">    </span><span class="espTag">submit</span>\n

p Note that this time we've used the fields element rather than the form element.  This will render child form elements
	+w in the same manner, but they will be based on the model supplied to the fields element.

p Finally, we will edit the ShowPost view to show our tags:

div.code <- code
	+= <span class="javaKeyword">import</span> com.test.blog.models.*\n
	+= <span class="javaKeyword">import</span> com.test.blog.views.comments.*\n
	+= \n
	+= <span class="javaKeyword">ShowPost</span>(Post post)\n
	+= \n
	+= <span class="espTag">p</span>\n
	+= <span class="espTab">  </span><span class="espTag">b</span> Name:</span>\n
	+= <span class="espTab">  </span><span class="espIText">+</span>  { post.getName() }\n
	+= <span class="espTag">p</span>\n
	+= <span class="espTab">  </span><span class="espTag">b</span> Title:</span>\n
	+= <span class="espTab">  </span><span class="espIText">+</span>  { post.getTitle() }\n
	+= <span class="espTag">p</span>\n
	+= <span class="espTab">  </span><span class="espTag">b</span> Content:</span>\n
	+= <span class="espTab">  </span><span class="espIText">+</span>  { post.getContent() }\n
	+= <span class="espTag">p</span>\n
	+= <span class="espTab">  </span><span class="espTag">b</span> Tags:</span>\n
	+= <span class="espTab">  </span>- <span class="javaKeyword">for</span>(Tag tag : post.tags()) {\n
	+= <span class="espTab">      </span><span class="espTag">a</span>(tag, show)  { tag.getName() }\n
	+= <span class="espTab">  </span>- }\n
	+= <span class="espTag">p</span>\n
	+= <span class="espTab">  </span><span class="espTag">b</span> Created At:</span>\n
	+= <span class="espTab">  </span><span class="espIText">+</span> { psst.getCreatedAt() }\n
	+= <span class="espTag">p</span>\n
	+= <span class="espTab">  </span><span class="espTag">b</span> Updated At:</span>\n
	+= <span class="espTab">  </span><span class="espIText">+</span> { post.getUpdatedAt() }\n
	+= \n
	+= <span class="espTag">h2</span> Comments</span>\n
	+= <span class="espTag">view</span>
	+ {"<ShowComment>"}
	+= (Comment: post.comments())\n
	+= \n
	+= <span class="espTag">h2</span> Add a comment:</span>\n
	+= <span class="espTag">view</span>
	+ {"<CommentForm>"}
	+= \n
	+= <span class="espTag">a</span>(post, showEdit) <span class="espIText">Edit</span>\n
	+= <span class="espTag">span</span> <span class="espIText"> | </span>\n
	+= <span class="espTag">a</span>(Post.class, showAll) <span class="espIText">Back</span>\n
	