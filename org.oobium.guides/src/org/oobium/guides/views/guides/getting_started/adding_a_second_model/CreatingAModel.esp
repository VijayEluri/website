CreatingAModel(String title = "Creating a Model")

title {title}

p Models in Oobium use a singular name, and their corresponding database tables use a plural name. For the model
	+w to hold comments, the convention is to use the name Comment. Even if you don't want to use the entire
	+w apparatus set up by scaffolding, it is still handy to use generators to make things like models
	+w and controllers. To create just the new model, run this command in your terminal:

div.code <- code $ create model -m Comment commenter:string body:text post:one

p The -m indicates to Oobium that we want to creat a model, but since nothing else is specified then this is the only
	+w thing that will be created. We could have created both the model and the controller by using -mc. To see other
	+w options, type <tt>create model help</tt> into the console for a description:

div.code <- code
	+> oobium$ create model help 
	+> Create a new Model
	+>   usage: create model [-fmvctr] <name> [attr1:type1 attr2:type2 ...]
	+>   flags: f - force (do not ask before overwriting)
	+>          m - destroy the model (use this alone to create _only_ the model)
	+>          v - create standard views for the model
	+>          c - create controller for the model
	+>          t - create test cases for the model and controller
	+>          r - add standard route for the model
	+>          default: "-mvctr" if project is not a Webservice; "-mctr" if it is

p Take a look at the newly created Comment.java:

div.code <- code.java
	+> package com.test.blog.models;
	+> 
	+> import com.test.blog.models.Post;
	+> import org.oobium.persist.Attribute;
	+> import org.oobium.persist.ModelDescription;
	+> import org.oobium.persist.Relation;
	+> import org.oobium.persist.Text;
	+> 
	+> @ModelDescription(
	+>   attrs = {
	+>     @Attribute(name="commenter", type=String.class),
	+>     @Attribute(name="body", type=Text.class)
	+>   },
	+>   hasOne = {
	+>     @Relation(name="post", type=Post.class)
	+>   },
	+>   timestamps = true
	+> )
	+> public class Comment extends CommentModel {
	+> 
	+> }

p This is very similar to the Post.java model that you saw earlier. The main difference is that we now have another
	+w section of the ModelDescription being used: the hasOne array. In this array are specified all of the model's hasOne
	+w relations (aptly created by the @Relation annotation). The above code can be read as: a comment has one post.

p In addition, Oobium has updated the CreateDatabase migration to handle the new model type:

div.code <- code.java
	+> @Override
	+> public void up() throws SQLException {
	+>   Table comments = createTable("comments",
	+>       String("commenter"),
	+>       Text("body"),
	+>       Timestamps(),
	+>       Integer("post")
	+>   );
	+>   comments.addIndex("post");
	+> 
	+>   createTable("posts",
	+>       String("name"),
	+>       String("title"),
	+>       Text("content"),
	+>       Timestamps()
	+>   );
	+> 
	+>   comments.addForeignKey("post", "posts");
	+>   comments.update();
	+> }
	+> 
	+> @Override
	+> public void down() throws SQLException {
	+>   changeTable("comments", removeForeignKey("post"));
	+> 
	+>   dropTable("comments");
	+>   dropTable("posts");
	+> }

p Notice at the end of the method that a foreign key is setup on the comments table.  This has to be done at the end,
	+w after the tables are all created, because it will add an actual constraint to the database.

p Go ahead and run the migration again, but this time use the 
	img("/database_refresh.png")
	+w Redo Migration button on the Server view's toolbar.
