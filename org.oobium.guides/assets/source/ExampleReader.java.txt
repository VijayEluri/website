package com.test.reader;

import static org.oobium.utils.StringUtils.*;

import org.eclipse.swt.SWT;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.graphics.Point;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.swt.widgets.Table;
import org.eclipse.swt.widgets.TableColumn;
import org.eclipse.swt.widgets.TableItem;
import org.eclipse.swt.widgets.Text;
import org.oobium.persist.Observer;
import org.oobium.persist.http.HttpPersistService;

import com.test.blog.models.Post;

public class ExampleReader {

	private static Display display;
	private static Shell shell;
	private static Table table;

	public static void main(String[] args) throws Exception {
		new HttpPersistService("localhost:5000", true);

		Post.addObserver(new Observer<Post>() {
			@Override
			protected void afterCreate(Post post) {
				addItem(post);
			}
			@Override
			protected void afterUpdate(Post post) {
				updateItem(post);
			}
			@Override
			protected void afterDestroy(int id) {
				removeItem(id);
			}
		});

		createUI();

		for (Post post : Post.findAll()) {
			addItem(post);
		}

		runEventLoop();
	}

	private static void addItem(final Post post) {
		display.syncExec(new Runnable() {
			@Override
			public void run() {
				TableItem item = new TableItem(table, SWT.NONE);
				item.setText(0, String.valueOf(post.getId()));
				for (int i = 0; i < Post.FIELDS.length; i++) {
					item.setText(i + 1, post.get(Post.FIELDS[i], ""));
				}
			}
		});
	}

	private static void updateItem(final Post post) {
		display.syncExec(new Runnable() {
			@Override
			public void run() {
				String id = String.valueOf(post.getId());
				for (TableItem item : table.getItems()) {
					if (id.equals(item.getText(0))) {
						for (int i = 0; i < Post.FIELDS.length; i++) {
							item.setText(i + 1,
									String.valueOf(post.get(Post.FIELDS[i])));
						}
						return;
					}
				}
			}
		});
	}

	private static void removeItem(final int id) {
		display.syncExec(new Runnable() {
			@Override
			public void run() {
				String sid = String.valueOf(id);
				for (TableItem item : table.getItems()) {
					if (sid.equals(item.getText(0))) {
						item.dispose();
						return;
					}
				}
			}
		});
	}

	private static void createUI() {
		display = new Display();
		shell = new Shell(display);
		shell.setLayout(new GridLayout(3, false));
		table = new Table(shell, SWT.SINGLE | SWT.BORDER | SWT.FULL_SELECTION);
		table.setLinesVisible(true);
		table.setHeaderVisible(true);
		table.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true, 3, 1));
		TableColumn c = new TableColumn(table, SWT.NONE);
		c.setText("id");
		c.pack();

		for (String s : Post.FIELDS) {
			c = new TableColumn(table, SWT.NONE);
			c.setText(titleize(s));
			c.pack();
		}

		Label lbl = new Label(shell, SWT.NONE);
		lbl.setText("Title: ");
		lbl.setLayoutData(new GridData(SWT.LEFT, SWT.FILL, false, false));
		final Text txt = new Text(shell, SWT.SINGLE | SWT.BORDER);
		txt.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, false));
		Button b = new Button(shell, SWT.PUSH);
		b.setText("Create New Post");
		b.setLayoutData(new GridData(SWT.FILL, SWT.FILL, false, false));

		b.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				Post post = new Post();
				post.setTitle(txt.getText());
				post.save();
			}
		});

		shell.setSize(new Point(500, 400));
	}

	private static void runEventLoop() {
		shell.open();
		while (!shell.isDisposed()) {
			if (!display.readAndDispatch()) {
				display.sleep();
			}
		}
		display.dispose();
		System.exit(0);
	}
}